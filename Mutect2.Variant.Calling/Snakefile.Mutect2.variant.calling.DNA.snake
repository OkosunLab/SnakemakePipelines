##########################################################
##
## Snakefile for the processing of UMI based DNA seq
##
## Written by: Findlay Bewicke-Copley
## Date: 13-05-2024
##########################################################

import glob

## Load config file
configfile: "Mutect2.Variant.Calling.yaml"
## Dynamically file all the sample IDs
## First build the search string
search="Alignment/{sample}.con.recalib.bam"
## Then find all the samples
SAMPLES = set(glob_wildcards(search).sample)

##########################################################
## RULES
##########################################################

## One rule to run them all

rule all:
	input:
		vcf=expand("VCF/{sample}.snvs.mutect.filtered.vcf", sample = SAMPLES),

##########################################################
## QC and file manuipulation
##########################################################

rule mutect2:
	input:
		map="Alignment/{sample}.con.recalib.bam",
		fasta=config["reference"],
		pon=config["pon"]
	output:
		vcf="VCF/{sample}.vcf",
		f1r2="Counts/{sample}.f1r2.tar.gz"
	threads: 
		config["mutect2Threads"]
	params:
		mem=config["gatkMem"]
	resources:
		mem_mb=config["gatkRunMem"]
	log:
		"logs/mutect2/{sample}.log"
	wrapper:
		"v3.10.2/bio/gatk/mutect"

rule gatk_get_pileup_summaries:
	input:
		bam="Alignment/{sample}.con.recalib.bam",
		variants=config["gnomad"],
		intervals=config["intervals"]
	output:
		"Counts/{sample}.summaries.table",
	threads: 
		config["mutect2Threads"]
	params:
		mem=config["gatkMem"]
	resources:
		mem_mb=config["gatkRunMem"]
	log:
		"logs/gatk_pileup/{sample}.summary.log",
	wrapper:
		"v3.10.2/bio/gatk/getpileupsummaries"

rule gatk_calculate_contamination:
	input:
		tumor="Counts/{sample}.summaries.table",
	output:
		"Counts/{sample}.contamination.table",
		"Counts/{sample}.segmentation.tsv"
	threads: 
		config["mutect2Threads"]
	params:
		mem=config["gatkMem"],
		extra="-tumor-segmentation Counts/{sample}.segmentation.tsv"
	resources:
		mem_mb=config["gatkRunMem"]
	log:
		"logs/gatk_contam/{sample}.contamination.log",
	wrapper:
		"v3.10.2/bio/gatk/calculatecontamination"

rule gatk_learnreadorientationmodel:
	input:
		f1r2="Counts/{sample}.f1r2.tar.gz",
	output:
		"Counts/{sample}.artifacts_prior.tar.gz",
	threads: 
		config["mutect2Threads"]
	params:
		mem=config["gatkMem"]
	resources:
		mem_mb=config["gatkRunMem"]
	log:
		"logs/gatk_oreintation/{sample}.learnreadorientationbias.log",
	wrapper:
		"v3.10.2/bio/gatk/learnreadorientationmodel"

rule gatk_filtermutectcalls_complete:
	input:
		vcf="VCF/{sample}.vcf",
		ref=config["reference"],
		bam="Alignment/{sample}.con.recalib.bam",
		contamination="Counts/{sample}.contamination.table",
		segmentation="Counts/{sample}.segmentation.tsv", 
		f1r2="Counts/{sample}.f1r2.tar.gz"
	output:
		vcf="VCF/{sample}.snvs.mutect.filtered.vcf",
	log:
		"logs/gatk_filter/{sample}.filter.snvs.log",
	params:
		mem=config["gatkMem"],
		extra="--max-alt-allele-count 3",
		java_opts="",
	resources:
		mem_mb=config["gatkRunMem"]
	wrapper:
		"v3.10.2/bio/gatk/filtermutectcalls"
